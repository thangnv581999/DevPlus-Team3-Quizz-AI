const apiKey = "AIzaSyChs02VvwUeRB0eoh_bf5auW0HbwH2FMco";
let grade = 0;

// Object ch·ª©a c√°c b·∫£n d·ªãch cho nhi·ªÅu ng√¥n ng·ªØ
const translations = {
  vi: {
    placeholder: "Nh·∫≠p ch·ªß ƒë·ªÅ c·ªßa b·∫°n...",
    generateButton: "T·∫°o Quiz",
    questionCount: "c√¢u h·ªèi",
    topic: "Ch·ªß ƒë·ªÅ",
    timeLeft: "Th·ªùi gian c√≤n l·∫°i",
    correctAnswer: "ƒê√°p √°n ƒë√∫ng",
    quizCompleted: "B·∫°n ƒë√£ ho√†n th√†nh b√†i Quiz!",
    question: "C√¢u h·ªèi",
    yourAnswer: "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n",
    correct: "Ch√≠nh x√°c!",
    incorrect: "Ch∆∞a ch√≠nh x√°c",
    noAnswer: "B·∫°n ch∆∞a ch·ªçn ƒë√°p √°n",
  },
  en: {
    placeholder: "Enter your topic...",
    generateButton: "Generate Quiz",
    questionCount: "questions",
    topic: "Topic",
    timeLeft: "Time left",
    correctAnswer: "Correct Answer",
    quizCompleted: "Quiz Completed!",
    question: "Question",
    yourAnswer: "Your Answer",
    correct: "Correct!",
    incorrect: "Incorrect",
    noAnswer: "You did not select an answer",
  },
  fr: {
    placeholder: "Entrez votre sujet...",
    generateButton: "G√©n√©rer le Quiz",
    questionCount: "questions",
    topic: "Sujet",
    timeLeft: "Temps restant",
    correctAnswer: "Bonne r√©ponse",
    quizCompleted: "Quiz termin√© !",
    question: "Question",
    yourAnswer: "Votre r√©ponse",
    correct: "Correct !",
    incorrect: "Incorrect",
    noAnswer: "Vous n'avez pas s√©lectionn√© de r√©ponse",
  },
  es: {
    placeholder: "Ingrese su tema...",
    generateButton: "Generar Quiz",
    questionCount: "preguntas",
    topic: "Tema",
    timeLeft: "Tiempo restante",
    correctAnswer: "Respuesta correcta",
    quizCompleted: "¬°Quiz completado!",
    question: "Pregunta",
    yourAnswer: "Tu respuesta",
    correct: "¬°Correcto!",
    incorrect: "Incorrecto",
    noAnswer: "No seleccionaste una respuesta",
  },
  de: {
    placeholder: "Geben Sie Ihr Thema ein...",
    generateButton: "Quiz generieren",
    questionCount: "Fragen",
    topic: "Thema",
    timeLeft: "Verbleibende Zeit",
    correctAnswer: "Richtige Antwort",
    quizCompleted: "Quiz abgeschlossen!",
    question: "Frage",
    yourAnswer: "Deine Antwort",
    correct: "Richtig!",
    incorrect: "Falsch",
    noAnswer: "Sie haben keine Antwort ausgew√§hlt",
  },
};

// Bi·∫øn l∆∞u ng√¥n ng·ªØ hi·ªán t·∫°i, m·∫∑c ƒë·ªãnh l√† ti·∫øng Vi·ªát
let isLoggingOut = false;
let quizStarted = false;
// L·∫•y tham s·ªë t·ª´ URL
const urlParams = new URLSearchParams(window.location.search);
const quizId = urlParams.get("quizId");
console.log(quizId);
let data;
let currentLanguage = "vi";
let topic;
let username;
let id;
let currentQuestionIndex = 0;
let userAnswers = [];
let totalTime = 0;
let timer = null;
let currentTopic = "";
let formattedQuiz;
let questions = null; // Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ c√¢u h·ªèi

// Event listener khi DOM ƒë∆∞·ª£c load ho√†n t·∫•t
document.addEventListener("DOMContentLoaded", async () => {
  try {
    const user = await getLoggedInUserManual();
    console.log("getLoggedInUser returned:", user);
    if (!user) {
      console.error(
        "Kh√¥ng t√¨m th·∫•y user ƒë√£ ƒëƒÉng nh·∫≠p. Chuy·ªÉn h∆∞·ªõng v·ªÅ trang login."
      );
      window.location.href = "login.html";
      return;
    }
    // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng
    document.getElementById("username").textContent = user.username;
    username = document.getElementById("username").textContent;

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t: c·∫≠p nh·∫≠t isLoggedIn th√†nh false trong IndexedDB
    document.getElementById("logoutBtn").addEventListener("click", async () => {
      isLoggingOut = true;
      try {
        console.log("Before logout, user object:", user);
        user.isLoggedIn = false;
        await updateUser(user);
        console.log("Update logout done. User object:", user);
        // ƒê·ªçc l·∫°i t·ª´ DB ƒë·ªÉ ki·ªÉm tra:
        const updatedUser = await getUser(user.id);
        console.log("Updated user from DB:", updatedUser);
      } catch (error) {
        console.error("L·ªói khi ƒëƒÉng xu·∫•t:", error);
      }
      window.location.href = "login.html";
    });
  } catch (error) {
    console.error("L·ªói khi truy xu·∫•t user:", error);
    window.location.href = "login.html";
    return;
  }

  // C·∫≠p nh·∫≠t ng√¥n ng·ªØ ngay khi trang t·∫£i
  updateUILanguage();

  if (quizId != null) {
    generateQuiz(quizId);
  }
  // C√°c x·ª≠ l√Ω kh√°c (ng√¥n ng·ªØ, t·∫°o quiz, ...)
  document.getElementById("language").addEventListener("change", (e) => {
    currentLanguage = e.target.value;
    updateUILanguage();
    });
    
    document.getElementById("generateButton").addEventListener("click", generateQuiz);

});


/**
 * C·∫≠p nh·∫≠t ng√¥n ng·ªØ hi·ªÉn th·ªã tr√™n giao di·ªán
 * - C·∫≠p nh·∫≠t placeholder cho input ch·ªß ƒë·ªÅ
 * - C·∫≠p nh·∫≠t text cho n√∫t t·∫°o quiz
 * - C·∫≠p nh·∫≠t text cho dropdown s·ªë c√¢u h·ªèi
 */
function updateUILanguage() {
  const lang = translations[currentLanguage];
  document.getElementById("topicInput").placeholder = lang.placeholder;
  document.getElementById("generateButton").textContent = lang.generateButton;

  const questionSelect = document.getElementById("questionCount");
  Array.from(questionSelect.options).forEach((option) => {
    option.text = `${option.value} ${lang.questionCount}`;
  });
}

/**
 * Reset ƒëi·ªÉm s·ªë v·ªÅ 0
 * - Reset bi·∫øn grade
 * - C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒëi·ªÉm tr√™n giao di·ªán
 */
function clearGrade() {
  document.getElementById("displayGrade").textContent = "0";
  grade = 0;
}

/**
 * T√≠nh v√† c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
 * @param {boolean} showAnswer - K·∫øt qu·∫£ tr·∫£ l·ªùi (ƒë√∫ng/sai)
 * @param {number} time - Th·ªùi gian c√≤n l·∫°i khi tr·∫£ l·ªùi
 */
function countGrade(showAnswer, time) {
  if (showAnswer) {
    grade += time;
    document.getElementById("displayGrade").textContent = grade;
  }
}

/**
 * Hi·ªÉn th·ªã modal x√°c nh·∫≠n
 * @param {string} title - Ti√™u ƒë·ªÅ modal
 * @param {string} message - N·ªôi dung th√¥ng b√°o
 * @returns {Promise} Promise resolve khi ng∆∞·ªùi d√πng ch·ªçn
 */
function showConfirmModal(title, message) {
  return new Promise((resolve) => {
    const modal = document.getElementById("confirmModal");
    const titleEl = document.getElementById("confirmTitle");
    const messageEl = document.getElementById("confirmMessage");
    const yesBtn = document.getElementById("confirmYes");
    const noBtn = document.getElementById("confirmNo");

    // C·∫≠p nh·∫≠t n·ªôi dung
    titleEl.textContent = title;
    messageEl.textContent = message;

    // Hi·ªÉn th·ªã modal
    modal.style.display = "block";

    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t
    function handleYes() {
      modal.style.display = "none";
      cleanup();
      resolve(true);
    }

    function handleNo() {
      modal.style.display = "none";
      cleanup();
      resolve(false);
    }

    function cleanup() {
      yesBtn.removeEventListener("click", handleYes);
      noBtn.removeEventListener("click", handleNo);
    }

    yesBtn.addEventListener("click", handleYes);
    noBtn.addEventListener("click", handleNo);
  });
}

/**
 * H√†m ch√≠nh ƒë·ªÉ t·∫°o quiz
 */
async function generateQuiz() {

  topic = document.getElementById("topicInput").value;
  console.log(topic);
  const questionCount = document.getElementById("questionCount").value;
  const level = document.getElementById("level").value;
  const language = document.getElementById("language").value;

  if(quizId != null){
    // ·∫®n ph·∫ßn t·∫°o quiz
    const quizGenerator = document.querySelector(".quiz-generator");
    quizGenerator.style.display = "none";

    const q = await getQuizById(quizId);
    totalTime = q.time;
    quizStarted = true;
    if (!q || !q.questions || !q.answers || !q.correctAnswers) {
        throw new Error("‚ùå D·ªØ li·ªáu quiz kh√¥ng h·ª£p l·ªá!");
    }

    userAnswers = q.userSelections || new Array(q.questions.length).fill(null);
    console.log(userAnswers);
    
    // T·∫°o quizArray theo format mong mu·ªën
    const quizz = q.questions.map((question, index) => ({
      id: index + 1, // ƒê√°nh s·ªë c√¢u h·ªèi
      text: question, // N·ªôi dung c√¢u h·ªèi
      options: q.answers[index].map((answer, idx) => ({
          label: String.fromCharCode(97 + idx), // Chuy·ªÉn index th√†nh "a", "b", "c", "d"
          text: answer
      })),
      correctAnswer: q.correctAnswers[index] // ƒê√°p √°n ƒë√∫ng
    }));
    console.log("üîπ D·ªØ li·ªáu quizz ƒë√£ ƒë∆∞·ª£c n·∫°p:", quizz);
    rentData(quizz);
  }else{
    // Ki·ªÉm tra c√°c tr∆∞·ªùng input
    if (!topic || !questionCount || !level || !language) {
      alert(
        currentLanguage === "vi"
          ? "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!"
          : "Please fill in all fields!"
      );
      return;
    }

    currentTopic = topic; // L∆∞u ch·ªß ƒë·ªÅ hi·ªán t·∫°i

    const confirmTitle =
      currentLanguage === "vi" ? "X√°c nh·∫≠n t·∫°o Quiz?" : "Confirm Quiz Creation?";
    const confirmMessage =
      currentLanguage === "vi"
        ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o Quiz v·ªÅ "${topic}" v·ªõi ${questionCount} c√¢u h·ªèi kh√¥ng?`
        : `Are you sure you want to create a Quiz about "${topic}" with ${questionCount} questions?`;

    const confirmed = await showConfirmModal(confirmTitle, confirmMessage);

    if (!confirmed) {
      return;
    }

    // ·∫®n ph·∫ßn t·∫°o quiz
    const quizGenerator = document.querySelector(".quiz-generator");
    quizGenerator.style.display = "none";
    
    quizStarted = true;

    clearGrade();
    const lang = translations[currentLanguage];

    // T·∫°o container m·ªõi cho quiz
    const mainContent = document.querySelector(".main-content");
    const quizContainer = document.createElement("div");
    quizContainer.id = "quizContainer";
    quizContainer.innerHTML = `
          <div id="quizOutput">
              <div>${lang.topic}: ${topic}</div>
          </div>
          <div id="quizQuestions">
              ${
                currentLanguage === "vi"
                  ? "<div>ƒêang t·∫°o c√¢u h·ªèi...</div>"
                  : "<div>Generating questions...</div>"
              }
          </div>
      `;
    mainContent.appendChild(quizContainer);

    try {
      const promptText =
        currentLanguage === "vi"
          ? `T·∫°o ${questionCount} c√¢u h·ªèi tr·∫Øc nghi·ªám b·∫±ng ti·∫øng Vi·ªát v·ªÅ ch·ªß ƒë·ªÅ ${topic}. Tr·∫£ v·ªÅ d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
                {
                  "questions": [
                    {
                      "id": 1,
                      "text": "n·ªôi dung c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát",
                      "options": [
                        {"label": "a", "text": "l·ª±a ch·ªçn a b·∫±ng ti·∫øng Vi·ªát"},
                        {"label": "b", "text": "l·ª±a ch·ªçn b b·∫±ng ti·∫øng Vi·ªát"},
                        {"label": "c", "text": "l·ª±a ch·ªçn c b·∫±ng ti·∫øng Vi·ªát"},
                        {"label": "d", "text": "l·ª±a ch·ªçn d b·∫±ng ti·∫øng Vi·ªát"}
                      ],
                      "correctAnswer": "a"
                    }
                  ]
                }

                L∆∞u √Ω:
                - T·∫•t c·∫£ n·ªôi dung ph·∫£i ƒë∆∞·ª£c vi·∫øt b·∫±ng ti·∫øng Vi·ªát
                - Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ tr√™n
                - M·ªói c√¢u h·ªèi ph·∫£i c√≥ ƒë·ªß 4 l·ª±a ch·ªçn a, b, c, d`
          : `Create ${questionCount} multiple choice questions in English about ${topic}. Return data in JSON format with the following structure:
                {
                  "questions": [
                    {
                      "id": 1,
                      "text": "question content in English",
                      "options": [
                        {"label": "a", "text": "option a in English"},
                        {"label": "b", "text": "option b in English"},
                        {"label": "c", "text": "option c in English"},
                        {"label": "d", "text": "option d in English"}
                      ],
                      "correctAnswer": "a"
                    }
                  ]
                }

                Note:
                - All content must be in English
                - Return exact JSON format as above
                - Each question must have all 4 options a, b, c, d`;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: promptText }],
              },
            ],
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 8192,
            },
          }),
        }
      );

      data = await response.json();

      if (!data.candidates || !data.candidates[0]?.content?.parts[0]?.text) {
        throw new Error("Invalid API response");
      }

      const quizContent = data.candidates[0].content.parts[0].text;
      const questions = parseQuizContent(quizContent);
      console.log(questions);
      rentData(questions);
      
    } catch (error) {
      console.error("Error:", error);
      quizQuestions.innerHTML = `<div class="error">C√≥ l·ªói x·∫£y ra: ${error.message}</div>`;
    }
  }

  

  // X·ª≠ l√Ω s·ª± ki·ªán tr∆∞·ªõc khi tho√°t trang
  window.addEventListener("beforeunload", (event) => {
    if (quizStarted && !isLoggingOut) {
      const message = currentLanguage === "vi" 
        ? "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi trang kh√¥ng? Ti·∫øn tr√¨nh l√†m b√†i c·ªßa b·∫°n s·∫Ω b·ªã m·∫•t!"
        : "Are you sure you want to leave? Your quiz progress will be lost!";

      event.preventDefault();
      event.returnValue = message;
    }
  });
}

function rentData(questions){
  if (questions.length === 0) {
    throw new Error("No questions parsed");
  }

  // Log questions and answers in a cleaner format
  console.log("Quiz Content:");
  questions.forEach((q, index) => {
    console.log(`\nQuestion ${index + 1}:`);
    console.log(`${q.text}`);
    q.options.forEach((opt) => {
      console.log(`${opt.label}) ${opt.text}`);
    });
    console.log(`Answer: ${q.correctAnswer}`);
    console.log("------------------------");
  });
  if(quizId == null){
    let quest = questions.map(q => q.text);
    let answers = questions.map(q => q.options.map(opt => opt.text));
    let correctAnswers = questions.map(q => q.correctAnswer);
    formattedQuiz = formatQuizData(topic,username, quest, answers, correctAnswers);

    // L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
    addQuiz(formattedQuiz).then(result => {
        id = result;
        console.log("Quiz added with ID:", result);
    }).catch(err => {
        console.error("Error adding quiz:", err);
    });
  }
  

  displayQuestion(questions, 0);
}

/**
 * Ph√¢n t√≠ch n·ªôi dung JSON t·ª´ AI th√†nh m·∫£ng c√¢u h·ªèi
 * @param {string} content - N·ªôi dung JSON tr·∫£ v·ªÅ t·ª´ AI
 * @returns {Array} M·∫£ng c√°c object c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c format
 */
function parseQuizContent(content) {
  try {
    // X·ª≠ l√Ω response c√≥ th·ªÉ ch·ª©a markdown format
    let jsonStr = content;

    // Lo·∫°i b·ªè markdown code block n·∫øu c√≥
    if (content.includes("```json")) {
      jsonStr = content.replace(/```json\n|\n```/g, "");
    } else if (content.includes("```")) {
      jsonStr = content.replace(/```\n|\n```/g, "");
    }

    // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† xu·ªëng d√≤ng th·ª´a
    jsonStr = jsonStr.trim();

    // C·ªë g·∫Øng parse JSON t·ª´ response
    const jsonData = JSON.parse(jsonStr);

    // Ki·ªÉm tra c·∫•u tr√∫c JSON
    if (!jsonData.questions || !Array.isArray(jsonData.questions)) {
      throw new Error("Invalid JSON structure");
    }

    // Validate v√† format t·ª´ng c√¢u h·ªèi
    const questions = jsonData.questions.map((q) => {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (
        !q.text ||
        !q.options ||
        !Array.isArray(q.options) ||
        !q.correctAnswer
      ) {
        throw new Error("Invalid question format");
      }

      // Ki·ªÉm tra ƒë·ªß 4 options
      if (q.options.length !== 4) {
        throw new Error("Each question must have exactly 4 options");
      }

      // Ki·ªÉm tra m·ªói option c√≥ ƒë·ªß label v√† text
      q.options.forEach((opt) => {
        if (!opt.label || !opt.text) {
          throw new Error("Invalid option format");
        }
      });

      return {
        text: q.text.trim(),
        options: q.options.map((opt) => ({
          label: opt.label.toLowerCase(),
          text: opt.text.trim(),
        })),
        correctAnswer: q.correctAnswer.toUpperCase(),
      };
    });

    // Log ƒë·ªÉ debug
    console.log("Parsed questions:", questions);

    return questions;
  } catch (error) {
    console.error("Error parsing JSON content:", error);
    console.log("Raw content:", content); // Log n·ªôi dung g·ªëc ƒë·ªÉ debug
    return [];
  }
}

/**
 * Hi·ªÉn th·ªã modal x√°c nh·∫≠n submit
 * @returns {Promise} Promise resolve khi ng∆∞·ªùi d√πng ch·ªçn
 */
function showSubmitModal() {
  const lang = translations[currentLanguage];
  const title =
    currentLanguage === "vi" ? "X√°c nh·∫≠n n·ªôp b√†i?" : "Confirm Submission?";
  const message =
    currentLanguage === "vi"
      ? "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng? Sau khi n·ªôp b√†i b·∫°n s·∫Ω kh√¥ng th·ªÉ quay l·∫°i ƒë·ªÉ s·ª≠a."
      : "Are you sure you want to submit? You cannot return to edit after submission.";
  return showConfirmModal(title, message);
}

/**
 * Hi·ªÉn th·ªã c√¢u h·ªèi l√™n giao di·ªán
 * @param {Array} questions - M·∫£ng c√°c c√¢u h·ªèi
 * @param {number} index - V·ªã tr√≠ c√¢u h·ªèi hi·ªán t·∫°i
 * Ch·ª©c nƒÉng:
 * - Hi·ªÉn th·ªã n·ªôi dung c√¢u h·ªèi
 * - T·∫°o timer ƒë·∫øm ng∆∞·ª£c
 * - X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ƒë√°p √°n
 * - Chuy·ªÉn trang khi ho√†n th√†nh quiz
 */
function displayQuestion(questions, index) {
  const lang = translations[currentLanguage];
  const mainContent = document.querySelector('.main-content');

  if (!questions || questions.length === 0) {
    mainContent.innerHTML = '<div class="error">Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c t·∫°o</div>';
    return;
  }

  // Kh·ªüi t·∫°o m·∫£ng c√¢u tr·∫£ l·ªùi v√† timer n·∫øu ch∆∞a c√≥
  if (userAnswers.length === 0) {
    userAnswers = new Array(questions.length).fill(null);
    if(quizId == null){
      totalTime = questions.length * 60; // 1 ph√∫t cho m·ªói c√¢u h·ªèi
    }
    startTimer();
  }else{
    startTimer();
  }

  // L·∫•y template v√† clone n√≥
  const template = document.getElementById('quiz-template');
  const quizElement = template.content.cloneNode(true);
  
  // L·∫•y c√°c ph·∫ßn t·ª≠ c·∫ßn c·∫≠p nh·∫≠t
  const topicInfo = quizElement.querySelector('.topic-info');
  const questionCounter = quizElement.querySelector('.question-counter');
  const timerLabel = quizElement.querySelector('.timer-label');
  const timerDisplay = quizElement.querySelector('.timer-display');
  const questionText = quizElement.querySelector('.question-text');
  const optionsGrid = quizElement.querySelector('.options-grid');
  const prevBtn = quizElement.querySelector('.prev-btn');
  const nextBtn = quizElement.querySelector('.next-btn');
  
  // C·∫≠p nh·∫≠t n·ªôi dung
  const question = questions[index];
  topicInfo.textContent = `${lang.topic}: ${currentTopic}`;
  questionCounter.textContent = `${lang.question} ${index + 1}/${questions.length}`;
  timerLabel.textContent = lang.timeLeft;
  questionText.textContent = question.text;

  // X√≥a event listeners c≈© n·∫øu c√≥
  const oldPrevBtn = document.querySelector('.prev-btn');
  const oldNextBtn = document.querySelector('.next-btn');
  
  if (oldPrevBtn) oldPrevBtn.replaceWith(oldPrevBtn.cloneNode(true));
  if (oldNextBtn) oldNextBtn.replaceWith(oldNextBtn.cloneNode(true));

  // T·∫°o c√°c option
  question.options.forEach(option => {
    const optionElement = document.createElement('div');
    const isSelected = userAnswers[index] === option.label.toUpperCase();

    optionElement.className = `option-item ${isSelected ? 'selected' : ''}`;
    optionElement.dataset.value = option.label;
    optionElement.innerHTML = `
        <span class="option-label">${option.label.toUpperCase()}</span>
        <span class="option-text">${option.text}</span>
    `;

    optionElement.addEventListener('click', () => {
        // B·ªè ch·ªçn t·∫•t c·∫£ option tr∆∞·ªõc ƒë√≥
        const options = optionsGrid.querySelectorAll('.option-item');
        options.forEach(opt => opt.classList.remove('selected'));

        // ƒê√°nh d·∫•u option ƒë∆∞·ª£c ch·ªçn
        optionElement.classList.add('selected');
        userAnswers[index] = option.label.toUpperCase();
        console.log(userAnswers);

        // L∆∞u l·ª±a ch·ªçn v√†o database ho·∫∑c bi·∫øn id
        const currentQuizId = quizId ? parseInt(quizId, 10) : id;
        replaceUserSelections(currentQuizId, userAnswers);
    });

    optionsGrid.appendChild(optionElement);
  });

  

  // C·∫≠p nh·∫≠t n√∫t ƒëi·ªÅu h∆∞·ªõng
  prevBtn.disabled = index === 0;
  nextBtn.textContent = index === questions.length - 1 ? 'Submit' : 'Next';
  
  prevBtn.addEventListener('click', () => {
    if (index > 0) {
      currentQuestionIndex--;
      displayQuestion(questions, currentQuestionIndex);
    }
  });

  nextBtn.addEventListener('click', async () => {
    if (index < questions.length - 1) {
      currentQuestionIndex++;
      displayQuestion(questions, currentQuestionIndex);
    } else {
      const shouldSubmit = await showSubmitModal();
      if (shouldSubmit) {
        const score = calculateScore(questions);
        const timeSubmit = new Date().toISOString();
        const timeSpent = questions.length * 60 - totalTime;
        await submitQuiz(score, timeSubmit, timeSpent);
      }
    }
  });

  // X√≥a n·ªôi dung c≈© v√† th√™m c√¢u h·ªèi m·ªõi
  mainContent.innerHTML = '';
  mainContent.appendChild(quizElement);

  // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
  updateTimerDisplay(timerDisplay);
}

/**
 * B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
 */
function startTimer() {
  timer = setInterval(async () => {
    totalTime--;
    if(quizId != null){
      id = quizId;
    }

    try {
        // L·∫•y d·ªØ li·ªáu quiz t·ª´ IndexedDB
        const q = await getQuizById(id);

        // C·∫≠p nh·∫≠t tr∆∞·ªùng time v√†o IndexedDB
        await updateQuizTime(id, totalTime);

        console.log("‚è≥ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian:", totalTime);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th·ªùi gian:", error);
    }

    // C·∫≠p nh·∫≠t giao di·ªán hi·ªÉn th·ªã th·ªùi gian
    const timerDisplay = document.querySelector(".timer-display");
    if (timerDisplay) {
        updateTimerDisplay(timerDisplay);
    }

    // H·∫øt th·ªùi gian th√¨ d·ª´ng timer v√† n·ªôp b√†i
    if (totalTime <= 0) {
        clearInterval(timer);
        submitQuiz(questions);
    }
}, 1000);

}

/**
 * C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
 * @param {HTMLElement} timerDisplay - Element hi·ªÉn th·ªã th·ªùi gian
 */
function updateTimerDisplay(timerDisplay) {
  const minutes = Math.floor(totalTime / 60);
  const seconds = totalTime % 60;
  timerDisplay.textContent = `${minutes}:${seconds
    .toString()
    .padStart(2, "0")}`;
}

async function submitQuiz(score, timeSubmit, timeSpent) {
  clearInterval(timer);
  timer = null;
  if(quizId != null){
    await submitQuizResult(parseInt(quizId, 10), score, timeSubmit, timeSpent);
    localStorage.setItem("quizId", quizId);
  }else{
    await submitQuizResult(id, score, timeSubmit, timeSpent);
    localStorage.setItem("quizId", id);
  }
  
  window.location.href = 'congratulations.html';
}

function calculateScore(questions) {
    let correctCount = 0;
    userAnswers.forEach((answer, index) => {
        if (answer && answer.toUpperCase() === questions[index].correctAnswer.toUpperCase()) {
            correctCount++;
        }
    });
    // Convert to 10-point scale
    const score = (correctCount / questions.length) * 10;
    // Round to 2 decimal places
    return Math.round(score * 100) / 100;
}
